
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; size <= 3} 
in let v = newref(0)
in letrec find_bt_helper (node) = 
    if number?(node)
    then zero?(1)
    else 
        (if node.data = deref(v)
        then zero?(0)
        else 
            (if node.data > deref(v)
            then (find_bt_helper node.left)
            else (find_bt_helper node.right)))
in let find_bt = proc (t) { proc (v1) {
    (begin
        setref(v, v1);
        (find_bt_helper t.root)
    end)}}
in ((find_bt t1) 11)
