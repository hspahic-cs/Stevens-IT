package stevens.cs306.mac;
import java.xml.bind;
import java.security.Key;
import java.util.ArrayList;
import java.util.Arrays;

// Implement this class
public class Mac extends MacSkeleton {

    /**
     * Implement the mac and verify methods.  Mac should take a message and a
     * key (generated by the generate method) and return a tag.  Verify should
     * take a message, tag, and key -- and authenticate that the tag corresponds
     * to the message/tag pair by returning true or false.
     *
     * The following methods have been made available to you through the
     * MacSkeleton class:
     *
     * byte[] xor(byte[] a, byte[] b) :: XOR two byte arrays. Returns result
     * byte[] pad(byte[] message, int blockSz) :: pads message to blockSz
     * byte[] encryptBlock(byte[] block, Key key) :: Encrypts a single block
     * int getBlockSize() :: Returns the block size of the cipher
     */

    /**
     * Creates a message authentication tag for a message with a given key.
     * @param message   The message to generate a MAC for
     * @param key       A secret key to use for MAC'ing the message
     * @return          A valid tag for the message
     */
    public byte[] mac(byte[] message, Key key) {
        // System.out.println("why are you not printing");
        // byte[] tag = new byte[message.length];
        // int blockSize = getBlockSize(); // 128/8 = 16
        
        
        // message = pad(message, blockSize);
        
        // for(int i = 0; i < message.length; i++){
        //     // System.out.println("a");
        //     byte[] block = Arrays.copyOfRange(message, i, i+blockSize); // copy block into new array
        //     System.out.println("block length " + block.length);
        //     // for(int k = 0; k < block.length; k++){
        //         // System.out.println("aaaaaaa");
        //         // System.out.println(block[k]);
        //     // }
        //     // block = xor(block, previous_block); //Do we need CBC?
        //     byte[] encblock = encryptBlock(block, key); // encrypt block

        //     for(int k = 0; k < encblock.length; k++){ // copy encrypted block bytes into tag
        //         tag[i+k] = encblock[k];
        //     }
        // }

        // return tag;
        int blockSize = getBlockSize();
    	
    	
    	byte[] paddedMessage = pad(message, blockSize);
    	int noOfBlocks = paddedMessage.length/blockSize; 
    	System.out.println(noOfBlocks);
    	//System.out.println(paddedMessage);
    	if (noOfBlocks == 1) {
    		//System.out.println("here");
    		byte [] encrypt = null;
    		try {
    			encrypt = encryptBlock(paddedMessage, key);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		return encrypt;
    	}

    	byte [] firstMessage = Arrays.copyOfRange(paddedMessage, 0, blockSize);
    	
    	byte [] encrypt = null;
    	try {
			encrypt = encryptBlock(firstMessage, key);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	//now encrypted would contain the first encryption of the first block with the key
    	for (int i=1; i<noOfBlocks; i++) {
    		//System.out.println("here1");
    		byte [] newBlock = Arrays.copyOfRange(paddedMessage, i*blockSize, (i*blockSize)+blockSize);
    		//System.out.println(newBlock);
    		byte[] xored = xor(encrypt, newBlock);
    		
    		try {
				encrypt = encryptBlock(xored, key);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
        return encrypt;
    }

    /**
     * Authenticates a message/tag pair with a key.  Returns true if the pair
     * is authentic, else false.
     * @param message   message to authenticate
     * @param tag       a MAC tag to authenticate with the message
     * @param key       secret key to authenticate the tag with
     */
    public boolean verify(byte[] message, byte[] tag, Key key) {
        byte[] genTag = mac(message, key);
        return Arrays.equals(genTag, tag);
    }

}

